<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure and Devops on Welcome to Prafull&#39;s blog</title>
    <link>http://localhost:1313/infrastructure-and-devops/</link>
    <description>Recent content in Infrastructure and Devops on Welcome to Prafull&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Jun 2024 20:44:31 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/infrastructure-and-devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi architecture management in Colima</title>
      <link>http://localhost:1313/infrastructure-and-devops/building-arch64-images/</link>
      <pubDate>Sun, 09 Jun 2024 20:44:31 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/building-arch64-images/</guid>
      <description>Multi-profiles management One of the most exciting Colima features is instances management. To do so, Colima is using profiles.&#xA;To create an instance with a profile name, add the -p flag to the command line. For example, colima start -p funny_profile will create a default instance withfunny_profileas profile name.colima start -p intel -a x86_64 -c 1will start an intel instance with 1 CPU using theintelname.&#xA;You can retrieve your current profiles by running colima list.</description>
    </item>
    <item>
      <title>Volumes in Docker</title>
      <link>http://localhost:1313/infrastructure-and-devops/volumes-in-docker/</link>
      <pubDate>Mon, 27 Feb 2023 08:58:46 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/volumes-in-docker/</guid>
      <description></description>
    </item>
    <item>
      <title>Docker Basics</title>
      <link>http://localhost:1313/infrastructure-and-devops/docker-basics/</link>
      <pubDate>Sun, 26 Feb 2023 17:19:46 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/docker-basics/</guid>
      <description>Docker is prime examle of platform which provides containerisation. There are mainy instances through which we can implement the containers but docker is one of the most popular to do so.&#xA;Docker architecture As you can see in picture, there are two main parts to the docker&#xA;docker CLI docker server We launch container, check their logs using docker CLI which in turns contacts docker server. Docker server is where docker daemon is running.</description>
    </item>
    <item>
      <title>Resource Acronyms in K8</title>
      <link>http://localhost:1313/infrastructure-and-devops/resource-acronyms-in-k8/</link>
      <pubDate>Fri, 24 Feb 2023 15:56:17 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/resource-acronyms-in-k8/</guid>
      <description> acronym resource po pods svc services ns namespaces rs resplicaset dp deployments sts stateful set ds daemon set </description>
    </item>
    <item>
      <title>K9s Shortcuts</title>
      <link>http://localhost:1313/infrastructure-and-devops/k9s-shortcuts/</link>
      <pubDate>Fri, 24 Feb 2023 15:29:34 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/k9s-shortcuts/</guid>
      <description>Shortcuts Description Syntax To view all the resources of particular type :&amp;lt;reource-type&amp;gt; To search through resources /&amp;lt;regex&amp;gt; To view &amp;amp; switch all ctx :ctx To switch to antother context :ctx &amp;lt;ctx-name&amp;gt; To switch to antother context :ctx &amp;lt;ctx-name&amp;gt; To describe resource Press d To edit resource Press e To view logs resource Press l To view all namespaces :ns To delete resource ctrl + d To kill resource ctrl + k Toggel wide column ctrl + w To view resources in error mode ctrl + z To view resources in xray mode :xray &amp;lt;resource-type&amp;gt; &amp;lt;namespace&amp;gt; </description>
    </item>
    <item>
      <title>Intro to Helm</title>
      <link>http://localhost:1313/infrastructure-and-devops/intro-to-helm/</link>
      <pubDate>Fri, 24 Feb 2023 09:05:31 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/intro-to-helm/</guid>
      <description>Helm acts like package manager for kubernetes. Kubernetes at its core doesn&amp;rsquo;t care about application as whole. It just cares that all the deployment told to it are up and running. But for us creating those resources one by one and applying them is tedious job especially in case of application with various resources such as ConfigMap, Secretes, Services etc.&#xA;Suppose you have to create resources for wordpress&#xA;helm install wordpress</description>
    </item>
    <item>
      <title>Workspaces in Terraform</title>
      <link>http://localhost:1313/infrastructure-and-devops/workspaces-in-terraform/</link>
      <pubDate>Wed, 22 Feb 2023 16:17:28 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/workspaces-in-terraform/</guid>
      <description>Workspaces in terraform gives us freedom to have same infrastructure for different environment with different values.&#xA;You can interact with workspaces in terraform using following commands&#xA;For help&#xA;terraform workspace -h&#xA;To view all workspaces&#xA;terraform workspace show&#xA;To select workspace&#xA;terraform workspace select Using variables based on Environment resource &amp;#34;aws_instance&amp;#34; &amp;#34;myec2&amp;#34;{ ami = &amp;#34;something random&amp;#34; instance_type = lookup(var.instance_type,terraform.workspace) } variable &amp;#34;instance_type&amp;#34; { type = &amp;#34;map&amp;#34; default = { default = &amp;#39;t2.</description>
    </item>
    <item>
      <title>Modules in Terraform</title>
      <link>http://localhost:1313/infrastructure-and-devops/modules-in-terraform/</link>
      <pubDate>Wed, 22 Feb 2023 08:34:41 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/modules-in-terraform/</guid>
      <description>You can reuse the block of terraform configuration code used to create part of infrastructure instead of writing new one. This will initialise that module in your current project.&#xA;Syntax -&#xA;module &amp;#34;name-of-module&amp;#34; { source = &amp;#34;path/to/module&amp;#34; } While initialising project using terraform init this will download the module.&#xA;Using the variables in module In order to make the module more flexible you can parameterise the values of configuration.&#xA;Syntax -</description>
    </item>
    <item>
      <title>Resource Dependencies in Terraform</title>
      <link>http://localhost:1313/infrastructure-and-devops/implicit-and-explicit-dependency-in-terraform/</link>
      <pubDate>Wed, 22 Feb 2023 08:33:07 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/implicit-and-explicit-dependency-in-terraform/</guid>
      <description>Have you ever wondered how does Terraform knows the order in which to create the resources? When we provision the infra one resource might have depedency on other for e.g. if we have create some resource on azure we need to create resource group first for it and then create the resource under that resource group.&#xA;Terraform uses this dependency information to determine the correct order in which to create the different resources.</description>
    </item>
    <item>
      <title>Attributes and Output Values</title>
      <link>http://localhost:1313/infrastructure-and-devops/attributes-and-output-values/</link>
      <pubDate>Fri, 17 Feb 2023 08:57:30 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/attributes-and-output-values/</guid>
      <description>TF have capabilities to output the values of resources once they are applied. You can do that using outout block. You can use the attributes that is being created to create other resources.&#xA;E.g.&#xA;resource &amp;#34;azurerm_resource_group&amp;#34; &amp;#34;example&amp;#34; { name = &amp;#34;example-resources&amp;#34; location = &amp;#34;West Europe&amp;#34; } resource &amp;#34;azurerm_dns_zone&amp;#34; &amp;#34;example&amp;#34; { name = &amp;#34;mydomain.com&amp;#34; resource_group_name = azurerm_resource_group.example.name } Here as you can see, first resource group is being created then inside that resource group a DNS zone is being created.</description>
    </item>
    <item>
      <title>Desired State and Current State</title>
      <link>http://localhost:1313/infrastructure-and-devops/desired-state-and-current-state/</link>
      <pubDate>Fri, 17 Feb 2023 08:45:49 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/desired-state-and-current-state/</guid>
      <description>Desired state One of the primary funciton of Terraform is to create real world resource that is described in Terraform Configuration file.&#xA;Current state This is state of currently running resource.&#xA;Terraform tries to match the desired state mensioned in TF configuration file. So if any property that is mensioned in TF state file is manually changed, TF will try to change it to match the desired state. Note: If some property that is not mensioned in TF configuration is changed then TF won&amp;rsquo;t try to change it because it is not configured in configuratio file.</description>
    </item>
    <item>
      <title>Terraform State File</title>
      <link>http://localhost:1313/infrastructure-and-devops/tf-state-file/</link>
      <pubDate>Fri, 17 Feb 2023 08:32:10 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/tf-state-file/</guid>
      <description>Terraform stores the state of real world resource created in file called terraform state file. Whenever trying to create the resource it terraform fetches cross checks it against state file. Before doing that it fetches the states from real world i.e. it refreshes the state. It contains the information about all the live resources. It contains all the informtion about the live running resource.</description>
    </item>
    <item>
      <title>Authenticate With Gitlab in Tf</title>
      <link>http://localhost:1313/infrastructure-and-devops/authenticate-with-gitlab-in-tf/</link>
      <pubDate>Fri, 17 Feb 2023 08:23:58 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/authenticate-with-gitlab-in-tf/</guid>
      <description>How to authenticate with gitlab for fetching module To authenticate with GitLab in Terraform and fetch a module from a GitLab repository, you can use a personal access token. Here are the general steps:&#xA;Generate a personal access token: In GitLab, go to your user settings and generate a personal access token with the &amp;ldquo;api&amp;rdquo; scope. Take note of the token value, as you won&amp;rsquo;t be able to see it again.</description>
    </item>
    <item>
      <title>Provider in Tf</title>
      <link>http://localhost:1313/infrastructure-and-devops/provider-in-tf/</link>
      <pubDate>Fri, 17 Feb 2023 08:19:09 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/provider-in-tf/</guid>
      <description>TF Provider Plugins to interact with various cloud vendors. Available in TF registry Provider configuration It is generally stored in root directory of module.&#xA;These configuration are global to all files.&#xA;provider &amp;#34;name-of-provider&amp;#34; { # config required by provider lias = &amp;#34;some-alias&amp;#34; vaersion = &amp;#34;~&amp;gt;3.0&amp;#34; } These provider need to be declared in required_provider block of terraform block.&#xA;terraform { required_providers { mycloud = { source = &amp;#34;mycorp/mycloud&amp;#34; version = &amp;#34;~&amp;gt;1.</description>
    </item>
    <item>
      <title>Nodeport Service in K8</title>
      <link>http://localhost:1313/infrastructure-and-devops/nodeport-service-in-k8/</link>
      <pubDate>Wed, 08 Feb 2023 15:51:55 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/nodeport-service-in-k8/</guid>
      <description>Here to demonstrate the use of nodeport service we will create some nginx pod and nodeport service to access it.&#xA;Deployment file apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: testing template: metadata: labels: app: testing for: nodeport-svc spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 Here we are creating 3 pods with nginx running inside of it. We have exposed port 80 of container.</description>
    </item>
    <item>
      <title>Functions in Gitlab</title>
      <link>http://localhost:1313/infrastructure-and-devops/functions-in-gitlab/</link>
      <pubDate>Wed, 08 Feb 2023 10:41:29 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/functions-in-gitlab/</guid>
      <description>setup.yml image: alpine .setup: script: - echo &amp;#34;in setup action&amp;#34; - echo &amp;#34;ending setup action&amp;#34; .teardown: script: - echo &amp;#34;in teardown action&amp;#34; - echo &amp;#34;ending teardown action&amp;#34; use of it setup.yml include: - setup.yml test: script: - echo &amp;#34;before running setup - !reference [.setup, script] - !reference [.teardown, script] </description>
    </item>
    <item>
      <title>Stages in Gitlab Pipeline</title>
      <link>http://localhost:1313/infrastructure-and-devops/stages-in-gitlab-pipeline/</link>
      <pubDate>Wed, 08 Feb 2023 09:58:26 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/stages-in-gitlab-pipeline/</guid>
      <description>allow_failure If value to this stage is set to&#xA;true : even if that job fails then rest of the pipeline will continue. false : then pipeline will fail &amp;amp; will be marked as failed. when This field is used to configure when that particular job must run. We can give following values to this field&#xA;on_success : run when all jobs in prior stage have succed. manual : run when someone manually triggers it.</description>
    </item>
    <item>
      <title>Yaml in Kubernetes</title>
      <link>http://localhost:1313/infrastructure-and-devops/yaml-in-kubernetes/</link>
      <pubDate>Mon, 06 Feb 2023 15:43:13 +0530</pubDate>
      <guid>http://localhost:1313/infrastructure-and-devops/yaml-in-kubernetes/</guid>
      <description>Fields in kubernetes Example :&#xA;apiVersion: v1 kind: Pod metadata: name: pod-demo labels: pod-name: yaml-in-k8-tutorial spec: containers: - name: nginx-container image: nginx apiVersion - String Depending on what type of resource you are trying to create apiVersion will change.&#xA;Syntax Description POD v1 Service v1 Replica Set app/v1 Deployment app/v1 How to choose apiVersion if there are two options available:&#xA;Latest Compatiblity Depedency kind - String It is type of resource that we are trying to create.</description>
    </item>
  </channel>
</rss>
