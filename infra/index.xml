<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Infras on Welcome to Prafull's blog</title><link>http://prafullchvn.github.io/infra/</link><description>Recent content in Infras on Welcome to Prafull's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Feb 2023 08:34:41 +0530</lastBuildDate><atom:link href="http://prafullchvn.github.io/infra/index.xml" rel="self" type="application/rss+xml"/><item><title>Modules in Terraform</title><link>http://prafullchvn.github.io/infra/modules-in-terraform/</link><pubDate>Wed, 22 Feb 2023 08:34:41 +0530</pubDate><guid>http://prafullchvn.github.io/infra/modules-in-terraform/</guid><description>You can reuse the block of terraform configuration code used to create part of infrastructure instead of writing new one. This will initialise that module in your current project.
Syntax -
module &amp;#34;name-of-module&amp;#34; { source = &amp;#34;path/to/module&amp;#34; } While initialising project using terraform init this will download the module.
Using the variables in module In order to make the module more flexible you can parameterise the values of configuration.
Syntax -</description></item><item><title>Attributes and Output Values</title><link>http://prafullchvn.github.io/infra/attributes-and-output-values/</link><pubDate>Fri, 17 Feb 2023 08:57:30 +0530</pubDate><guid>http://prafullchvn.github.io/infra/attributes-and-output-values/</guid><description>TF have capabilities to output the values of resources once they are applied. You can do that using outout block. You can use the attributes that is being created to create other resources.
E.g.
resource &amp;#34;azurerm_resource_group&amp;#34; &amp;#34;example&amp;#34; { name = &amp;#34;example-resources&amp;#34; location = &amp;#34;West Europe&amp;#34; } resource &amp;#34;azurerm_dns_zone&amp;#34; &amp;#34;example&amp;#34; { name = &amp;#34;mydomain.com&amp;#34; resource_group_name = azurerm_resource_group.example.name } Here as you can see, first resource group is being created then inside that resource group a DNS zone is being created.</description></item><item><title>Desired State and Current State</title><link>http://prafullchvn.github.io/infra/desired-state-and-current-state/</link><pubDate>Fri, 17 Feb 2023 08:45:49 +0530</pubDate><guid>http://prafullchvn.github.io/infra/desired-state-and-current-state/</guid><description>Desired state One of the primary funciton of Terraform is to create real world resource that is described in Terraform Configuration file.
Current state This is state of currently running resource.
Terraform tries to match the desired state mensioned in TF configuration file. So if any property that is mensioned in TF state file is manually changed, TF will try to change it to match the desired state. Note: If some property that is not mensioned in TF configuration is changed then TF won&amp;rsquo;t try to change it because it is not configured in configuratio file.</description></item><item><title>Terraform State File</title><link>http://prafullchvn.github.io/infra/tf-state-file/</link><pubDate>Fri, 17 Feb 2023 08:32:10 +0530</pubDate><guid>http://prafullchvn.github.io/infra/tf-state-file/</guid><description>Terraform stores the state of real world resource created in file called terraform state file. Whenever trying to create the resource it terraform fetches cross checks it against state file. Before doing that it fetches the states from real world i.e. it refreshes the state. It contains the information about all the live resources. It contains all the informtion about the live running resource.</description></item><item><title>Authenticate With Gitlab in Tf</title><link>http://prafullchvn.github.io/infra/authenticate-with-gitlab-in-tf/</link><pubDate>Fri, 17 Feb 2023 08:23:58 +0530</pubDate><guid>http://prafullchvn.github.io/infra/authenticate-with-gitlab-in-tf/</guid><description>How to authenticate with gitlab for fetching module To authenticate with GitLab in Terraform and fetch a module from a GitLab repository, you can use a personal access token. Here are the general steps:
Generate a personal access token: In GitLab, go to your user settings and generate a personal access token with the &amp;ldquo;api&amp;rdquo; scope. Take note of the token value, as you won&amp;rsquo;t be able to see it again.</description></item><item><title>Provider in Tf</title><link>http://prafullchvn.github.io/infra/provider-in-tf/</link><pubDate>Fri, 17 Feb 2023 08:19:09 +0530</pubDate><guid>http://prafullchvn.github.io/infra/provider-in-tf/</guid><description>TF Provider Plugins to interact with various cloud vendors. Available in TF registry Provider configuration It is generally stored in root directory of module.
These configuration are global to all files.
provider &amp;#34;name-of-provider&amp;#34; { # config required by provider lias = &amp;#34;some-alias&amp;#34; vaersion = &amp;#34;~&amp;gt;3.0&amp;#34; } These provider need to be declared in required_provider block of terraform block.
terraform { required_providers { mycloud = { source = &amp;#34;mycorp/mycloud&amp;#34; version = &amp;#34;~&amp;gt;1.</description></item><item><title>Nodeport Service in K8</title><link>http://prafullchvn.github.io/infra/nodeport-service-in-k8/</link><pubDate>Wed, 08 Feb 2023 15:51:55 +0530</pubDate><guid>http://prafullchvn.github.io/infra/nodeport-service-in-k8/</guid><description>Here to demonstrate the use of nodeport service we will create some nginx pod and nodeport service to access it.
Deployment file apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: testing template: metadata: labels: app: testing for: nodeport-svc spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 Here we are creating 3 pods with nginx running inside of it. We have exposed port 80 of container.</description></item><item><title>Yaml in Kubernetes</title><link>http://prafullchvn.github.io/infra/yaml-in-kubernetes/</link><pubDate>Mon, 06 Feb 2023 15:43:13 +0530</pubDate><guid>http://prafullchvn.github.io/infra/yaml-in-kubernetes/</guid><description>Fields in kubernetes Example :
apiVersion: v1 kind: Pod metadata: name: pod-demo labels: pod-name: yaml-in-k8-tutorial spec: containers: - name: nginx-container image: nginx apiVersion - String Depending on what type of resource you are trying to create apiVersion will change.
Syntax Description POD v1 Service v1 Replica Set app/v1 Deployment app/v1 How to choose apiVersion if there are two options available:
Latest Compatiblity Depedency kind - String It is type of resource that we are trying to create.</description></item></channel></rss>